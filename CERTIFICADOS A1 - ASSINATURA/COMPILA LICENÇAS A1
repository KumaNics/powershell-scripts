<#
.SYNOPSIS
    Script para consolidar múltiplos relatórios CSV de inventário de certificados em um único arquivo XLSX.
#>

$nomeModulo = "ImportExcel"
Write-Host "Verificando se o módulo '$nomeModulo' está instalado..."

# Verifica se o módulo está disponível na máquina
if (-not (Get-Module -Name $nomeModulo -ListAvailable)) {
    Write-Warning "Módulo '$nomeModulo' não encontrado. Tentando instalar..."
    try {
        # Instala o módulo apenas para o usuário atual, sem exigir elevação de administrador
        Install-Module -Name $nomeModulo -Repository PSGallery -Force -AcceptLicense -Scope CurrentUser -ErrorAction Stop
        Write-Host "Módulo '$nomeModulo' instalado com sucesso." -ForegroundColor Green
    } catch {
        Write-Error "Falha ao instalar o módulo '$nomeModulo'. O script não pode continuar."
        return
    }
} else {
    Write-Host "Módulo '$nomeModulo' já está instalado."
}

# Importa o módulo para a sessão atual para garantir que os comandos estejam disponíveis.
Import-Module -Name $nomeModulo
Write-Host "--------------------------------------------------------"


# CONFIGURAÇÃO
# Caminho da pasta na rede onde os relatórios individuais (.csv) estão salvos.
$CaminhoOrigem = "[INSIRA O LOCAL AQUI]"

# Caminho e nome do arquivo Excel (.xlsx) que será gerado.
$CaminhoDestino = "[INSIRA O LOCAL AQUI]"
$NomeArquivoFinal = "Relatorio_final_certificados_$(Get-Date -Format 'yyyy-MM-dd').xlsx"
$ArquivoDeSaida = Join-Path -Path $CaminhoDestino -ChildPath $NomeArquivoFinal

# SCRIPT
try {
    Write-Host "Iniciando a compilação..." -ForegroundColor Green

    # Encontrar e importar todos os arquivos CSV, ignorando o log de erros.
    $arquivosCSV = Get-ChildItem -Path $CaminhoOrigem -Exclude "_log_de_erros.txt" | Where-Object { $_.Name -like '*.csv' }
    if ($arquivosCSV.Count -eq 0) {
        Write-Warning "Nenhum arquivo CSV encontrado para compilar."
        return
    }

    Write-Host "Encontrados $($arquivosCSV.Count) arquivos para compilar."
    $dadosCompilados = $arquivosCSV | ForEach-Object {
        Import-Csv -Path $_.FullName -Delimiter ';'
    }

    # Mantém apenas o registro mais recente para cada computador e usuário.
    Write-Host "Removendo duplicatas, mantendo o registro mais recente..."
    $dadosUnicos = $dadosCompilados | Sort-Object -Property DataDaVerificacao -Descending | Sort-Object -Property Computador, UsuarioLogado -Unique

    Write-Host "Total de $($dadosUnicos.Count) registros únicos compilados."

    # Exporta os dados consolidados.
    Write-Host "Exportando dados para: $ArquivoDeSaida" -ForegroundColor Green
    $dadosUnicos | Export-Excel -Path $ArquivoDeSaida -AutoSize -TableName "InventarioCertificados" -TableStyle Medium6 -FreezeTopRow
    
    Write-Host "--------------------------------------------------------"
    Write-Host "Processo concluído com sucesso!" -ForegroundColor Cyan
    Write-Host "Relatório compilado salvo em: $ArquivoDeSaida"

} catch {
    Write-Error "Ocorreu um erro durante a execução: $($_.Exception.Message)"
}
