<#
.SYNOPSIS
    Script para consolidar mÃºltiplos relatÃ³rios CSV de inventÃ¡rio de certificados em um Ãºnico arquivo XLSX.
#>

$nomeModulo = "ImportExcel"
Write-Host "Verificando se o mÃ³dulo '$nomeModulo' estÃ¡ instalado..."

if (-not (Get-Module -Name $nomeModulo -ListAvailable)) {
    Write-Warning "MÃ³dulo '$nomeModulo' nÃ£o encontrado. Tentando instalar..."
    try {
        Install-Module -Name $nomeModulo -Repository PSGallery -Force -AcceptLicense -Scope CurrentUser -ErrorAction Stop
        Write-Host "MÃ³dulo '$nomeModulo' instalado com sucesso." -ForegroundColor Green
    } catch {
        Write-Error "Falha ao instalar o mÃ³dulo '$nomeModulo'. O script nÃ£o pode continuar."
        return
    }
} else {
    Write-Host "MÃ³dulo '$nomeModulo' jÃ¡ estÃ¡ instalado."
}

Import-Module -Name $nomeModulo
Write-Host "--------------------------------------------------------"


# SCRIPT
# Caminho da pasta na rede onde os relatÃ³rios individuais (.csv) estÃ£o salvos.
$CaminhoOrigem = "[INSIRA AQUI]"

# Caminho e nome do arquivo Excel (.xlsx) que serÃ¡ gerado.
$CaminhoDestino = "[INSIRA AQUI]"
$NomeArquivoFinal = "[INSIRA AQUI]"
$ArquivoDeSaida = Join-Path -Path $CaminhoDestino -ChildPath $NomeArquivoFinal

try {
    Write-Host "Iniciando a compilaÃ§Ã£o..." -ForegroundColor Cyan
    Write-Host "Procurando arquivos CSV em: $CaminhoOrigem"

    if (-not (Test-Path -Path $CaminhoOrigem)) {
        Write-Error "O caminho de origem '$CaminhoOrigem' nÃ£o foi encontrado ou estÃ¡ inacessÃ­vel."
        return 
    }

    $arquivosCSV = Get-ChildItem -Path $CaminhoOrigem -Filter '*.csv' -ErrorAction Stop
    
    if ($arquivosCSV.Count -eq 0) {
        Write-Warning "Nenhum arquivo CSV encontrado para compilar no caminho especificado."
        Write-Host "ConteÃºdo encontrado na pasta (todos os tipos de arquivo):"
        Get-ChildItem -Path $CaminhoOrigem | ForEach-Object { Write-Host " - $($_.Name)" }
        return
    }

    Write-Host "Encontrados $($arquivosCSV.Count) arquivos para compilar:"
    $arquivosCSV.Name | ForEach-Object { Write-Host " - $_" }
    
    $dadosCompilados = $arquivosCSV | ForEach-Object {
        Import-Csv -Path $_.FullName -Delimiter ';'
    }

    Write-Host "Removendo duplicatas, mantendo o registro mais recente..."
    $dadosUnicos = $dadosCompilados | Sort-Object -Property DataDaVerificacao -Descending | Sort-Object -Property Computador, UsuarioLogado -Unique

    Write-Host "Total de $($dadosUnicos.Count) registros Ãºnicos compilados."

    Write-Host "Exportando dados para: $ArquivoDeSaida" -ForegroundColor Green
    $dadosUnicos | Export-Excel -Path $ArquivoDeSaida -AutoSize -TableName "InventarioCertificados" -TableStyle Medium6 -FreezeTopRow -WorksheetName "Inventario"
    
    Write-Host "--------------------------------------------------------"
    Write-Host "Processo concluÃ­do com sucesso!" -ForegroundColor Green
    Write-Host "RelatÃ³rio compilado salvo em: $ArquivoDeSaida"

} catch {
    Write-Error "Ocorreu um erro crÃ­tico durante a execuÃ§Ã£o: $($_.Exception.Message)"
    Write-Error "Erro na linha: $($_.InvocationInfo.ScriptLineNumber)"
}
