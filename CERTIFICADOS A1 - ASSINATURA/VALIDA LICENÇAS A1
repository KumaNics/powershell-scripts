<#
.SYNOPSIS
    SCRIPT PARA VERIFICAR CERTIFICADOS A1 INSTALADOS VIA GPO LOGON/LOGOFF
#>

$CaminhoRepositorioCentral = "[INSIRA AQUI]" 

# SCRIPT
try {
    # DATA E HORA DA RODAGEM DO SCRIPT
    $dataVerificacao = Get-Date

    # INFORMAÇÕES DA MÁQUINA E DO USUÁRIO LOGADO
    $NomeComputador = $env:COMPUTERNAME
    $NomeUsuario = $env:USERNAME

    # CRIA O PADRÃO DO ARQUIVO MÁQUINA-USUÁRIO.csv
    $nomeArquivo = "$NomeComputador-$NomeUsuario.csv"
    $ArquivoDeSaida = Join-Path -Path $CaminhoRepositorioCentral -ChildPath $nomeArquivo

    # VERIFICA A EXISTENCIA DO DIRETORIO
    if (-not (Test-Path -Path $CaminhoRepositorioCentral)) {
        New-Item -Path $CaminhoRepositorioCentral -ItemType Directory -Force | Out-Null
    }
    
    # LOCAL DE INSTALAÇÃO DE CERTIFICADOS
    $LocaisVerificacao = @(
        "Cert:\CurrentUser\My",
        "Cert:\LocalMachine\My"
    )

    $certificadosEncontrados = @()

    # CERTIFICADOS
    foreach ($local in $LocaisVerificacao) {
        $certificadosInstalados = Get-ChildItem -Path $local | Where-Object { $_.HasPrivateKey } 

        foreach ($cert in $certificadosInstalados) {
            $cnpj = ""
            if ($cert.Subject -match 'CNPJ:(\d{14})' -or $cert.Subject -match ':(\d{14})') {
                $cnpj = $matches[1]
            }

            # SAIDA DO CSV
            $infoCertificado = [PSCustomObject]@{
                Computador      = $NomeComputador
                UsuarioLogado   = $NomeUsuario
                CNPJ            = $cnpj
                Certificado     = $cert.Subject
                Emitente        = $cert.Issuer
                Validade        = $cert.NotAfter
                NumeroDeSerie   = $cert.SerialNumber
                Repositorio     = $local
                DataDaVerificacao = $dataVerificacao
            }

            $certificadosEncontrados += $infoCertificado
        }
    }

    # EXPORTA OS DADOS PARA O CSV
    if ($certificadosEncontrados.Count -gt 0) {
        $certificadosEncontrados | Export-Csv -Path $ArquivoDeSaida -NoTypeInformation -Encoding UTF8 -Delimiter ';'
    }

} catch {
    # LOG DE ERROS
    $mensagemErro = "[$([DateTime]::Now)] ERRO no computador ${NomeComputador} (Usuário: $NomeUsuario): $($_.Exception.Message)"
    $arquivoLogErro = Join-Path -Path $CaminhoRepositorioCentral -ChildPath "_log_de_erros.txt"
    Add-Content -Path $arquivoLogErro -Value $mensagemErro
}
